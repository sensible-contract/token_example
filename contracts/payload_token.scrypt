import "util.scrypt";

/**
* token protocol payload parser
*
* PayloadToken负责解码/编码Token合约的数据。构造函数解码，dump函数编码。
*
* bsv合约可以由脚本代码部分和数据部分组成，两部分之间用 OP_RETURN 操作符隔开。
* 当锁定脚本执行到OP_RETURN时便会终止，其后的数据部分不会被处理。
* 但当前数据部分依然是一条或多条正常的OP_PUSHDATAX语句，附带着确定数量的字节内容。
*
* Token合约的数据格式设计如下：
*
* 最后一个字节为数据格式类型，分为4种：ISSUE、TRANSFER、SWAP、SELL
*
* 1. codePart 为合约代码。结尾还包括2字节额外内容：OP_RETURN操作符 和 OP_PUSHDATA(一个字节0x28)，表示接下来有40字节的GenesisPart。
* 2. GenesisPart 为合约溯源数据。包括genesisTx的 某utxo的outpoint，以及创建合约的outputIndex。共 32+4+4=40 字节。
* 3. 其后再包括一个OP_PUSHDATA(dataPrefix),可能有多字节，取决于其他数据data的长度。
* 4. 接下来便是其他数据部分聚合，比如：pubkeyHash有20字节，tokenAmount有8字节，satoshiAmount有8字节。
*
*  codePart, GenesisPart, blockHeader, blockHeight, MINT
*  codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
*  codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
*  codePart, GenesisPart, ownerPkh, tokenAmount, satoshiAmount, SELL
*/

contract PayloadToken {
  /* 合约最后一块数据部分开始的字节下标，在第二个OP_PUSHDATA之后 */
  int dataStart;

  /* 合约代码的内容，末尾包括 OP_RETURN 和 0x28 */
  bytes codePart;

  /* 包括合约代码内容，OP_RETURN 和 0x28，再加上GenesisPart内容，但不包括后续的 OP_PUSHDATA */
  bytes codeWithGenesisPart;

  /* 数据类型，1字节 */
  bytes dataType;

  /* 溯源需匹配genesisTx input的outpoint 和output的index */
  bytes genesisOutpoint;
  bytes genesisOutputIdx;

  /* mint 数据 */
  bytes blockHeader;
  int blockHeight;

  /* transfer 数据 */
  Ripemd160 ownerPkh;
  int amount;

  /* swap 数据 */
  bytes genesisOutpointSwap;
  bytes genesisOutputIdxSwap;
  int amountSwap;

  /* sell 数据 */
  int satoshiAmountSell;

  /* 不同类型数据部分的长度 */
  static int genesisLen = 40;
  static int mintLen = 89;
  static int transferLen = 29;
  static int swapLen = 77;
  static int sellLen = 37;

  /* OP_PUSHDATA 协议推送不同长度数据时，需要的前缀字节 */
  static bytes mintPrefix = b'4c59';
  static bytes transferPrefix = b'1d';
  static bytes swapPrefix = b'4c4d';
  static bytes sellPrefix = b'25';

  /* 数据类型dataType标记 */
  static bytes MINT = b'00';
  static bytes TRANSFER = b'01';
  static bytes SWAP = b'02';
  static bytes SELL = b'03';

  constructor(bytes scriptCode) {
    int scriptLen = len(scriptCode);
    this.dataType = scriptCode[scriptLen - 1 : ];

    int dataLen = 0;
    int prefixLen = 0;
    if (this.dataType == PayloadToken.MINT) {
      dataLen = PayloadToken.mintLen;
      prefixLen = len(PayloadToken.mintPrefix);
    }
    else if (this.dataType == PayloadToken.TRANSFER) {
      dataLen = PayloadToken.transferLen;
      prefixLen = len(PayloadToken.transferPrefix);
    }
    else if (this.dataType == PayloadToken.SWAP) {
      dataLen = PayloadToken.swapLen;
      prefixLen = len(PayloadToken.swapPrefix);
    }
    else if (this.dataType == PayloadToken.SELL) {
      dataLen = PayloadToken.sellLen;
      prefixLen = len(PayloadToken.sellPrefix);
    }
    /* part */
    this.dataStart = scriptLen - dataLen;
    this.codeWithGenesisPart = scriptCode[ : this.dataStart - prefixLen ];
    int codeWithGenesisLen = len(this.codeWithGenesisPart);
    this.codePart = this.codeWithGenesisPart[ : codeWithGenesisLen - PayloadToken.genesisLen];
    /* genesis */
    this.genesisOutpoint = this.codeWithGenesisPart[codeWithGenesisLen - PayloadToken.genesisLen : codeWithGenesisLen - 4];
    this.genesisOutputIdx = this.codeWithGenesisPart[codeWithGenesisLen - 4 : ];
    /* data: */
    bytes dataPart = scriptCode[this.dataStart : ];

    /* support many kinds of data type */
    if (this.dataType == PayloadToken.MINT) {
      this.blockHeader = dataPart[ : 80];
      this.blockHeight = unpack(dataPart[80 : 80 + 8]);
    } else {
      this.ownerPkh = Ripemd160(dataPart[ : 20]);
      this.amount = unpack(dataPart[20 : 20 + 8]);
    }

    if (this.dataType == PayloadToken.SWAP) {
      this.genesisOutpointSwap = dataPart[28 : 28 + 36];
      this.genesisOutputIdxSwap = dataPart[64 : 64 + 4];
      this.amountSwap = unpack(dataPart[68 : 68 + 8]);
    }
    else if (this.dataType == PayloadToken.SELL) {
      this.satoshiAmountSell = unpack(dataPart[28 : 28 + 8]);
    }
  }

  function dump() : bytes {
    bytes payload = b'';
    if (this.dataType == PayloadToken.MINT) {
      payload = PayloadToken.mintPrefix +
      this.blockHeader + num2bin(this.blockHeight, Util.OutputValueLen) +
      this.dataType;
    }
    else if (this.dataType == PayloadToken.TRANSFER) {
      payload = PayloadToken.transferPrefix +
      this.ownerPkh + num2bin(this.amount, Util.OutputValueLen) +
      this.dataType;
    }
    else if (this.dataType == PayloadToken.SWAP) {
      payload = PayloadToken.swapPrefix +
      this.ownerPkh + num2bin(this.amount, Util.OutputValueLen) +
      this.genesisOutpointSwap + this.genesisOutputIdxSwap + num2bin(this.amountSwap, Util.OutputValueLen) +
      this.dataType;
    }
    else if (this.dataType == PayloadToken.SELL) {
      payload = PayloadToken.sellPrefix +
      this.ownerPkh + num2bin(this.amount, Util.OutputValueLen) +
      num2bin(this.satoshiAmountSell, Util.OutputValueLen) +
      this.dataType;
    }
    return this.codeWithGenesisPart + payload;
  }
}
