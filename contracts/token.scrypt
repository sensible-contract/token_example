import "util.scrypt";
import "rabin.scrypt";
import "satotx.scrypt";
import "payload_token.scrypt";

/**
* A token protocol based on UTXO model
*
*
* mint:
*   codePart, GenesisPart, blockHeader0, blockHeight, MINT
*    ->
*   codePart, GenesisPart, blockHeader1, blockHeight+1, MINT
*   codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
*
* split:
*   codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
*    ->
*   codePart, GenesisPart, ownerPkhA, tokenAmount0, TRANSFER
*   codePart, GenesisPart, ownerPkhB, tokenAmount1, TRANSFER
*
* merge:
*   codePart, GenesisPart, ownerPkhA, tokenAmount0, TRANSFER
*   codePart, GenesisPart, ownerPkhB, tokenAmount1, TRANSFER
*    ->
*   codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
*
*
* makeSwap:
*   codePart, GenesisPartA, ownerPkhA, tokenAmountA, TRANSFER
*    ->
*   codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
*
* takeSwap（能否部分成交？）:
*   codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
*   codePart, GenesisPartB, ownerPkhB, tokenAmountB, TRANSFER
*    ->
*   codePart, GenesisPartA, ownerPkhB, tokenAmountA, TRANSFER
*   codePart, GenesisPartB, ownerPkhA, tokenAmountB, TRANSFER
*
*
* sell:
*   codePart, GenesisPart, ownerPkhA, tokenAmount, TRANSFER
*    ->
*   codePart, GenesisPart, ownerPkhA, tokenAmount, satoshiAmount, SELL
*
* buy（能否部分成交？）:
*   codePart, GenesisPart, ownerPkhA, tokenAmount, satoshiAmount, SELL
*   ownerPkhB, satoshiAmount
*    ->
*   codePart, GenesisPart, ownerPkhB, tokenAmount, TRANSFER
*   ownerPkhA, satoshiAmount
*
*
* mint函数允许公开按blockHeight递增发行token，输入为1个MINT，输出为1个MINT，1个TRANSFER
*      发行规则和Bitcoin一致：
*      需要提供blockHeader, 后一个blockHeader中必须包括前一个blockHeader的hash256；
*      满足难度约束； 每次发行量按210000块减半；初始一次为50个，但没有实现交易费。
*
* split函数允许用户分割token，输入为1个TRANSFER，输出为2个TRANSFER。
* merge函数允许用户合并2个token，输入为2个TRANSFER，输出为1个TRANSFER.
*
* burn 函数用于销毁用户的token，输入为1个TRANSFER，输出为1个找零
*/


contract Token {
  int rabinPubKey;

  //////////////// mint
  public function mint(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    bytes blockHeader,
    Ripemd160 receiverPkh, int satoshiAmount1,
    Ripemd160 changePkh, int satoshiAmount2) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    require(len(blockHeader) == 80);

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be mint
    require(pl.dataType == PayloadToken.MINT);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, pl.genesisOutpoint, pl.genesisOutputIdx));

    // 计算token subsidy
    int halvings = pl.blockHeight / 210000;
    require(halvings <= 32);
    bytes tokenAmount = num2bin(5000000000, Util.OutputValueLen) << halvings;

    int satoshiMint = Util.value(txPreimage);

    pl.blockHeader = blockHeader;
    pl.blockHeight = pl.blockHeight + 1;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiMint);

    pl.ownerPkh = receiverPkh;
    pl.amount = unpack(tokenAmount);
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript1 = pl.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount2);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// split
  public function split(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,

    Sig senderSig, PubKey sender,
    Ripemd160 receiver0Pkh, int tokenAmount0, int satoshiAmount0,
    Ripemd160 receiver1Pkh, int tokenAmount1, int satoshiAmount1,
    Ripemd160 changePkh, int satoshiAmount2) {

    require(tokenAmount0 > 0);
    require(tokenAmount1 > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(sender) == pl.ownerPkh);
    require(checkSig(senderSig, sender));
    require(pl.amount == tokenAmount0 + tokenAmount1);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    // 业务操作
    pl.ownerPkh = receiver0Pkh;
    pl.amount = tokenAmount0;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    pl.ownerPkh = receiver1Pkh;
    pl.amount = tokenAmount1;
    bytes outputScript1 = pl.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount2);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// merge
  public function merge(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    Sig senderSig, PubKey sender,
    Ripemd160 receiverPkh, bytes prevouts, int satoshiAmount0,
    Ripemd160 changePkh, int satoshiAmount1) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(sender) == pl.ownerPkh);
    require(checkSig(senderSig, sender));

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(pl.codeWithGenesisPart, prevouts));

    /* other scriptCode */
    PayloadToken plOther = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plOther.dataType == PayloadToken.TRANSFER);
    require(plOther.codeWithGenesisPart == pl.codeWithGenesisPart);

    // merge
    pl.ownerPkh = receiverPkh;
    pl.amount = pl.amount + plOther.amount;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A make swap
  public function makeSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    bytes genesisOutpointSwap, bytes genesisOutputIdxSwap,
    int tokenAmountSwap,
    Ripemd160 changePkh, int satoshiAmount) {

    require(tokenAmountSwap > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.genesisOutpointSwap = genesisOutpointSwap;
    pl.genesisOutputIdxSwap = genesisOutputIdxSwap;
    pl.amountSwap = tokenAmountSwap;
    pl.dataType = PayloadToken.SWAP;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A cancel swap
  public function cancelSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Ripemd160 changePkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be swap
    require(pl.dataType == PayloadToken.SWAP);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A finish swap
  public function finishSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    bytes prevouts,
    Ripemd160 changePkh, int satoshiAmount) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken plA = new PayloadToken(lockingScript);

    // dataType must be swap
    require(plA.dataType == PayloadToken.SWAP);

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(plA.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(plA.codePart, prevouts));

    /* other scriptCode */
    PayloadToken plB = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plB.dataType == PayloadToken.TRANSFER);
    require(plB.codePart == plA.codePart);

    /* must match genesis */
    require(plB.genesisOutpoint == plA.genesisOutpointSwap);
    require(plB.genesisOutputIdx == plA.genesisOutputIdxSwap);
    require(plB.amount >= plA.amountSwap);

    int satoshiAmountA = Util.value(txPreimage);
    int satoshiAmountB = unpack(sideTxUtxoMsg[36 : 44]);

    Ripemd160 ownerPkhA = plA.ownerPkh;
    // swap
    plA.ownerPkh = plB.ownerPkh;
    plA.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = plA.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmountB);

    plB.ownerPkh = ownerPkhA;
    bytes outputScript1 = plB.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmountA);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// B take swap
  public function takeSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    Sig ownerSig, PubKey owner,
    bytes prevouts,
    Ripemd160 changePkh, int satoshiAmount) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken plB = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(plB.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == plB.ownerPkh);
    require(checkSig(ownerSig, owner));

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(plB.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(plB.codePart, prevouts));

    /* other scriptCode */
    PayloadToken plA = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plA.dataType == PayloadToken.SWAP);
    require(plA.codePart == plB.codePart);

    int satoshiAmountB = Util.value(txPreimage);
    int satoshiAmountA = unpack(sideTxUtxoMsg[36 : 44]);

    // take swap
    Ripemd160 ownerPkhA = plA.ownerPkh;

    plA.ownerPkh = plB.ownerPkh;
    plA.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = plA.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmountB);

    plB.ownerPkh = ownerPkhA;
    bytes outputScript1 = plB.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmountA);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A sell
  public function sell(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    int satoshAmountSell,
    Ripemd160 changePkh, int satoshiAmount) {

    require(satoshAmountSell > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.satoshiAmountSell = satoshAmountSell;
    pl.dataType = PayloadToken.SELL;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A cancel sell
  public function cancelSell(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Ripemd160 changePkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be sell
    require(pl.dataType == PayloadToken.SELL);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// B buy
  public function buy(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Ripemd160 buyerPkh, int satoshiAmount0,
    Ripemd160 changePkh, int satoshiAmount1) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be sell
    require(pl.dataType == PayloadToken.SELL);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    Ripemd160 sellerPkh = pl.ownerPkh;

    // 业务操作
    pl.ownerPkh = buyerPkh;
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(sellerPkh);
    bytes output2 = Util.buildOutput(outputScript2, pl.satoshiAmountSell + satoshiBefore);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// burn a token back to normal bitcoins
  public function burn(SigHashPreimage txPreimage,
    Sig senderSig, PubKey sender,
    Ripemd160 receiverPkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(sender) == pl.ownerPkh);
    require(checkSig(senderSig, sender));

    // send to a P2PKH script
    bytes lockingScript0 = Util.buildPublicKeyHashScript(receiverPkh);
    bytes output0 = Util.buildOutput(lockingScript0, satoshiAmount);

    Sha256 hashOutputs = hash256(output0);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}
