import "util.scrypt";
import "rabin.scrypt";
import "satotx.scrypt";
import "payload_token.scrypt";
import "payload_nft.scrypt";

/**
* A token protocol based on UTXO model
*
* 该合约实现了一个UTXO模式的Token协议，可发行任意多种采用该协议的token。
* 协议支持Token转账、不同token之间兑换、和另一种NFT兑换、和bsv兑换等功能。
*
* 当前合约支持函数如下:
*  mint: 发行新的token
*  split: 将token余额一分为二
*  merge: 将两个token余额合二为一
*  makeSwap: 发起不同token之间的兑换
*  cancelSwap：取消token兑换
*  finishSwap：完成token兑换，发起方合约执行
*  takeSwap：完成token兑换，参与方合约执行
*  takeSwapNFT：完成token到nft的兑换，参与方合约执行
*  sell：发起token到bsv的兑换
*  cancelSell：取消token到bsv的兑换
*  buy：完成bsv到token的兑换，参与方合约执行
*  burn：销毁token
*
* 各个函数详细处理逻辑见各自文档。
* 暂约定合约的函数花费utxo和产生utxo时，用箭头符号(->)来区分Tx内的input和output，(->)上为input花费的UTXO数据，下为output产生的UTXO数据。
*
*/

contract Token {
  int rabinPubKey;

  //////////////// mint
  /*
  * mint:
  *   codePart, GenesisPart, blockHeader0, blockHeight, MINT
  *    ->
  *   codePart, GenesisPart, blockHeader1, blockHeight+1, MINT
  *   codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
  *
  * mint函数允许公开按blockHeight递增发行token，输入为1个MINT，输出为1个MINT，1个TRANSFER
  *      发行规则和Bitcoin一致：
  *      需要提供blockHeader, 后一个blockHeader中必须包括前一个blockHeader的hash256；
  *      满足难度约束； 每次发行量按210000块减半；初始一次为50个，但没有实现交易费。
  *
  */
  public function mint(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    bytes blockHeader,
    Ripemd160 receiverPkh, int satoshiAmount1,
    Ripemd160 changePkh, int satoshiAmount2) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    require(len(blockHeader) == 80);

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be mint
    require(pl.dataType == PayloadToken.MINT);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, pl.genesisOutpoint, pl.genesisOutputIdx));

    // 计算token subsidy
    int halvings = pl.blockHeight / 210000;
    require(halvings <= 32);
    bytes tokenAmount = num2bin(5000000000, Util.OutputValueLen) << halvings;

    int satoshiMint = Util.value(txPreimage);

    pl.blockHeader = blockHeader;
    pl.blockHeight = pl.blockHeight + 1;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiMint);

    pl.ownerPkh = receiverPkh;
    pl.amount = unpack(tokenAmount);
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript1 = pl.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount2);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// split
  /*
  * split:
  *   codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
  *    ->
  *   codePart, GenesisPart, ownerPkhA, tokenAmount0, TRANSFER
  *   codePart, GenesisPart, ownerPkhB, tokenAmount1, TRANSFER
  *
  * split函数允许用户分割token，输入为1个TRANSFER，输出为2个TRANSFER。
  */
  public function split(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,

    Sig senderSig, PubKey sender,
    Ripemd160 receiver0Pkh, int tokenAmount0, int satoshiAmount0,
    Ripemd160 receiver1Pkh, int tokenAmount1, int satoshiAmount1,
    Ripemd160 changePkh, int satoshiAmount2) {

    require(tokenAmount0 > 0);
    require(tokenAmount1 > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(sender) == pl.ownerPkh);
    require(checkSig(senderSig, sender));
    require(pl.amount == tokenAmount0 + tokenAmount1);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    // 业务操作
    pl.ownerPkh = receiver0Pkh;
    pl.amount = tokenAmount0;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    pl.ownerPkh = receiver1Pkh;
    pl.amount = tokenAmount1;
    bytes outputScript1 = pl.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount2);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// merge
  /*
  * merge:
  *   codePart, GenesisPart, ownerPkhA, tokenAmount0, TRANSFER
  *   codePart, GenesisPart, ownerPkhB, tokenAmount1, TRANSFER
  *    ->
  *   codePart, GenesisPart, ownerPkh, tokenAmount, TRANSFER
  *
  * merge函数允许用户合并2个token，输入为2个TRANSFER，输出为1个TRANSFER.
  */
  public function merge(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    Sig senderSig, PubKey sender,
    Ripemd160 receiverPkh, bytes prevouts, int satoshiAmount0,
    Ripemd160 changePkh, int satoshiAmount1) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(sender) == pl.ownerPkh);
    require(checkSig(senderSig, sender));

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(pl.codeWithGenesisPart, prevouts));

    /* other scriptCode */
    PayloadToken plOther = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plOther.dataType == PayloadToken.TRANSFER);
    require(plOther.codeWithGenesisPart == pl.codeWithGenesisPart);

    // merge
    pl.ownerPkh = receiverPkh;
    pl.amount = pl.amount + plOther.amount;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A make swap
  /*
  * makeSwap:
  *   codePart, GenesisPartA, ownerPkhA, tokenAmountA, TRANSFER
  *    ->
  *   codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
  */
  public function makeSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    bytes genesisOutpointSwap, bytes genesisOutputIdxSwap,
    int tokenAmountSwap,
    Ripemd160 changePkh, int satoshiAmount) {

    require(tokenAmountSwap > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.genesisOutpointSwap = genesisOutpointSwap;
    pl.genesisOutputIdxSwap = genesisOutputIdxSwap;
    pl.amountSwap = tokenAmountSwap;
    pl.dataType = PayloadToken.SWAP;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A cancel swap
  /*
  * cancelSwap:
  *   codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
  *    ->
  *   codePart, GenesisPartA, ownerPkhA, tokenAmountA, TRANSFER
  */
  public function cancelSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Ripemd160 changePkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be swap
    require(pl.dataType == PayloadToken.SWAP);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A finish swap
  /*
  * finishSwap（能否部分成交？）:
  *   (finishSwap) codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
  *   (takeSwap)   codePart, GenesisPartB, ownerPkhB, tokenAmountB, TRANSFER
  *    ->
  *   codePart, GenesisPartA, ownerPkhB, tokenAmountA, TRANSFER
  *   codePart, GenesisPartB, ownerPkhA, tokenAmountB, TRANSFER
  */
  public function finishSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    bytes prevouts,
    Ripemd160 changePkh, int satoshiAmount) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken plA = new PayloadToken(lockingScript);

    // dataType must be swap
    require(plA.dataType == PayloadToken.SWAP);

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(plA.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(plA.codePart, prevouts));

    /* other scriptCode */
    PayloadToken plB = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plB.dataType == PayloadToken.TRANSFER);
    require(plB.codePart == plA.codePart);

    /* must match genesis */
    require(plB.genesisOutpoint == plA.genesisOutpointSwap);
    require(plB.genesisOutputIdx == plA.genesisOutputIdxSwap);
    require(plB.amount >= plA.amountSwap);

    int satoshiAmountA = Util.value(txPreimage);
    int satoshiAmountB = unpack(sideTxUtxoMsg[36 : 44]);

    Ripemd160 ownerPkhA = plA.ownerPkh;
    // swap
    plA.ownerPkh = plB.ownerPkh;
    plA.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = plA.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmountB);

    plB.ownerPkh = ownerPkhA;
    bytes outputScript1 = plB.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmountA);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// B take swap
  /*
  * takeSwap（能否部分成交？）:
  *   (finishSwap) codePart, GenesisPartA, ownerPkhA, tokenAmountA, GenesisPartB, tokenAmountB, SWAP
  *   (takeSwap)   codePart, GenesisPartB, ownerPkhB, tokenAmountB, TRANSFER
  *    ->
  *   codePart, GenesisPartA, ownerPkhB, tokenAmountA, TRANSFER
  *   codePart, GenesisPartB, ownerPkhA, tokenAmountB, TRANSFER
  */
  public function takeSwap(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    Sig ownerSig, PubKey owner,
    bytes prevouts,
    Ripemd160 changePkh, int satoshiAmount) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken plB = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(plB.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == plB.ownerPkh);
    require(checkSig(ownerSig, owner));

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(plB.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(plB.codePart, prevouts));

    /* other scriptCode */
    PayloadToken plA = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plA.dataType == PayloadToken.SWAP);
    require(plA.codePart == plB.codePart);

    int satoshiAmountB = Util.value(txPreimage);
    int satoshiAmountA = unpack(sideTxUtxoMsg[36 : 44]);

    // take swap
    Ripemd160 ownerPkhA = plA.ownerPkh;

    plA.ownerPkh = plB.ownerPkh;
    plA.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = plA.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmountB);

    plB.ownerPkh = ownerPkhA;
    bytes outputScript1 = plB.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmountA);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// B take swap NFT
  /*
  *（Token不检查NFT合约类型codePartNFT，允许和任意符合数据格式的NFT合约兑换）
  * takeSwapNFT:
  *   (NFT.finishSwapToken) codePartNFT, GenesisPartA, ownerPkhA, tokenId, hash256(codePartTkn + GenesisPartB), tokenAmountB, SWAP
  *   (Tkn.takeSwapNFT)     codePartTkn, GenesisPartB, ownerPkhB, tokenAmountB, TRANSFER
  *    ->
  *   codePartNFT, GenesisPartA, ownerPkhB, tokenId, TRANSFER
  *   codePartTkn, GenesisPartB, ownerPkhA, tokenAmountB, TRANSFER
  */
  public function takeSwapNFT(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    Sig ownerSig, PubKey owner,
    bytes prevouts,
    Ripemd160 changePkh, int satoshiAmount) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken plB = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(plB.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == plB.ownerPkh);
    require(checkSig(ownerSig, owner));

    /* other scriptCode */
    PayloadNFT plA = new PayloadNFT(sideTxUtxoMsg[44 : ]);
    require(plA.dataType == PayloadNFT.SWAP);

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(plB.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(b'', prevouts));
    /* check prevoutpoint but ignore codePartA */

    int satoshiAmountB = Util.value(txPreimage);
    int satoshiAmountA = unpack(sideTxUtxoMsg[36 : 44]);

    // take swap
    Ripemd160 ownerPkhA = plA.ownerPkh;

    plA.ownerPkh = plB.ownerPkh;
    plA.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = plA.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmountB);

    plB.ownerPkh = ownerPkhA;
    bytes outputScript1 = plB.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmountA);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A sell
  /*
  * sell:
  *   codePart, GenesisPart, ownerPkhA, tokenAmount, TRANSFER
  *    ->
  *   codePart, GenesisPart, ownerPkhA, tokenAmount, satoshiAmount, SELL
  */
  public function sell(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    int satoshAmountSell,
    Ripemd160 changePkh, int satoshiAmount) {

    require(satoshAmountSell > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.satoshiAmountSell = satoshAmountSell;
    pl.dataType = PayloadToken.SELL;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// A cancel sell
  /*
  * cancelSell:
  *   codePart, GenesisPart, ownerPkhA, tokenAmount, satoshiAmount, SELL
  *    ->
  *   codePart, GenesisPart, ownerPkhA, tokenAmount, TRANSFER
  */
  public function cancelSell(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Ripemd160 changePkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be sell
    require(pl.dataType == PayloadToken.SELL);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// B buy
  /*
  * buy（能否部分成交？）:
  *   codePart, GenesisPart, ownerPkhA, tokenAmount, satoshiAmount, SELL
  *   ownerPkhB, satoshiAmount
  *    ->
  *   codePart, GenesisPart, ownerPkhB, tokenAmount, TRANSFER
  *   ownerPkhA, satoshiAmount
  */
  public function buy(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Ripemd160 buyerPkh, int satoshiAmount0,
    Ripemd160 changePkh, int satoshiAmount1) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be sell
    require(pl.dataType == PayloadToken.SELL);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    Ripemd160 sellerPkh = pl.ownerPkh;

    // 业务操作
    pl.ownerPkh = buyerPkh;
    pl.dataType = PayloadToken.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(sellerPkh);
    bytes output2 = Util.buildOutput(outputScript2, pl.satoshiAmountSell + satoshiBefore);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  //////////////// burn a token back to normal bitcoins
  /*
  * burn 函数用于销毁用户的token，输入为1个TRANSFER，输出为1个找零
  */
  public function burn(SigHashPreimage txPreimage,
    Sig senderSig, PubKey sender,
    Ripemd160 receiverPkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadToken pl = new PayloadToken(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadToken.TRANSFER);

    // authorize
    require(hash160(sender) == pl.ownerPkh);
    require(checkSig(senderSig, sender));

    // send to a P2PKH script
    bytes lockingScript0 = Util.buildPublicKeyHashScript(receiverPkh);
    bytes output0 = Util.buildOutput(lockingScript0, satoshiAmount);

    Sha256 hashOutputs = hash256(output0);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}
