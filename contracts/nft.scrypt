import "util.scrypt";
import "rabin.scrypt";
import "satotx.scrypt";
import "payload_nft.scrypt";
import "payload_token.scrypt";

/*
 * A safty NFT protocol
 *
 * 该合约实现了一个UTXO模式的NFT协议，可发行任意多种采用该协议的NFT。
 * 协议支持NFT发行、所有权转移、和某具体Token协议之间兑换、和bsv兑换等功能。
 *
 * 当前合约支持函数如下:
 *    issue: 发行新的NFT
 *    transfer: 将NFT所有权转移给他人
 *    makeSwapToken: 发起NFT到Token的兑换
 *    cancelSwapToken：取消NFT到Token的兑换，发起方合约执行
 *    finishSwapToken：完成NFT到Token的兑换，发起方合约执行
 *    sell：发起NFT到bsv的兑换
 *    cancelSell：取消NFT到bsv的兑换
 *    buy：完成bsv到NFT的兑换，参与方合约执行
 *    burn：销毁token
 *
 * 各个函数详细处理逻辑见各自文档。
 * 暂约定合约的函数花费utxo和产生utxo时，用箭头符号(->)来区分Tx内的input和output，(->)上为input花费的UTXO数据，下为output产生的UTXO数据。
 *
 */

contract NFT {
  int rabinPubKey;

  /*
   * issue 函数允许发行人按tokenId从0递增发行nft，输出为一个ISSUE，一个TRANSFER
   *
   * issue:
   *   codePart, GenesisPart, issuerPkh, tokenId, ISSUE
   *    ->
   *   codePart, GenesisPart, issuerPkh, tokenId+1, ISSUE
   *   codePart, GenesisPart, ownerPkh, tokenId+1, TRANSFER
   */
  public function issue(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig issuerSig, PubKey issuer,
    Ripemd160 receiverPkh, int satoshiAmount1,
    Ripemd160 changePkh, int satoshiAmount2) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be issue
    require(pl.dataType == PayloadNFT.ISSUE);

    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, pl.genesisOutpoint, pl.genesisOutputIdx));

    // authorize
    require(hash160(issuer) == pl.ownerPkh);
    require(checkSig(issuerSig, issuer));

    // 业务操作
    int satoshiIssue = Util.value(txPreimage);

    pl.tokenId = pl.tokenId + 1;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiIssue);

    pl.ownerPkh = receiverPkh;
    pl.dataType = PayloadNFT.TRANSFER;
    bytes outputScript1 = pl.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes lockingScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(lockingScript2, satoshiAmount2);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /*
   * transfer 函数允许用户移动自己的nft，输出为一个TRANSFER，一个找零.
   *
   * transfer:
   *   codePart, GenesisPart, ownerPkhA, tokenId, TRANSFER
   *    ->
   *   codePart, GenesisPart, ownerPkhB, tokenId, TRANSFER
   *
   */
  public function transfer(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,

    Sig ownerSig, PubKey owner,
    Ripemd160 receiverPkh, int satoshiAmount0,
    Ripemd160 changePkh, int satoshiAmount1) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadNFT.TRANSFER);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 业务操作
    pl.ownerPkh = receiverPkh;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    bytes lockingScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(lockingScript1, satoshiAmount1);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /* user A make swap for token
   * makeSwapToken:
   *   codePartA, GenesisPartA, ownerPkhA, tokenId, TRANSFER
   *    ->
   *   codePartA, GenesisPartA, ownerPkhA, tokenId, hash256(codePartB + GenesisPartB), tokenAmountB, SWAP
   *
   */
  public function makeSwapToken(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Sha256 codeWithGenesisPartHashSwap,
    int tokenAmountSwap,
    Ripemd160 changePkh, int satoshiAmount) {

    require(tokenAmountSwap > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadNFT.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.codeWithGenesisPartHashSwap = codeWithGenesisPartHashSwap;
    pl.amountSwap = tokenAmountSwap;
    pl.dataType = PayloadNFT.SWAP;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /* user A cancel swap token
   * cancelSwapToken:
   *   codePartA, GenesisPartA, ownerPkhA, tokenId, hash256(codePartB + GenesisPartB), tokenAmountB, SWAP
   *    ->
   *   codePartA, GenesisPartA, ownerPkhA, tokenId, TRANSFER
   */
  public function cancelSwapToken(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Ripemd160 changePkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be swap
    require(pl.dataType == PayloadNFT.SWAP);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.dataType = PayloadNFT.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /* user A finish swap
   * 此Tx涉及2种不同合约的执行，其中各合约执行各自的解锁函数，相互配合。
   * finishSwapToken:
   *   (nft.finishSwapToken) codePartNFT, GenesisPartA, ownerPkhA, tokenId, hash256(codePartTkn + GenesisPartB), tokenAmountB, SWAP
   *   (tkn.takeSwapNFT)     codePartTkn, GenesisPartB, ownerPkhB, tokenAmountB, TRANSFER
   *    ->
   *   codePartNFT, GenesisPartA, ownerPkhB, tokenId, TRANSFER
   *   codePartTkn, GenesisPartB, ownerPkhA, tokenAmountB, TRANSFER
   *
   */
  public function finishSwapToken(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    int sideTxUtxoSig, bytes sideTxUtxoMsg, bytes sideTxUtxoPadding,

    bytes prevouts,
    Ripemd160 changePkh, int satoshiAmount) {

    // this ensures the preimage is for the current tx
    require(Tx.checkPreimage(txPreimage));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT plA = new PayloadNFT(lockingScript);

    // dataType must be swap
    require(plA.dataType == PayloadNFT.SWAP);

    // source
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding,
      sideTxUtxoSig, sideTxUtxoMsg, sideTxUtxoPadding);
    require(st.verifyGenesis(plA.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));
    require(st.verifySide(b'', prevouts));

    /* other scriptCode */
    PayloadToken plB = new PayloadToken(sideTxUtxoMsg[44 : ]);
    require(plB.dataType == PayloadToken.TRANSFER);
    /* must match genesis */
    require(sha256(plB.codeWithGenesisPart) == plA.codeWithGenesisPartHashSwap);
    require(plB.amount >= plA.amountSwap);

    int satoshiAmountA = Util.value(txPreimage);
    int satoshiAmountB = unpack(sideTxUtxoMsg[36 : 44]);

    Ripemd160 ownerPkhA = plA.ownerPkh;
    // swap
    plA.ownerPkh = plB.ownerPkh;
    plA.dataType = PayloadNFT.TRANSFER;
    bytes outputScript0 = plA.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmountB);

    plB.ownerPkh = ownerPkhA;
    bytes outputScript1 = plB.dump();
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmountA);

    bytes outputScript2 = Util.buildPublicKeyHashScript(changePkh);
    bytes output2 = Util.buildOutput(outputScript2, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /* user A sell
   * sell:
   *   codePart, GenesisPart, ownerPkhA, tokenId, TRANSFER
   *    ->
   *   codePart, GenesisPart, ownerPkhA, tokenId, satoshiAmount, SELL
   */
  public function sell(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    int satoshAmountSell,
    Ripemd160 changePkh, int satoshiAmount) {

    require(satoshAmountSell > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadNFT.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.satoshiAmountSell = satoshAmountSell;
    pl.dataType = PayloadNFT.SELL;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /* user A cancel sell
   * sell:
   *   codePart, GenesisPart, ownerPkhA, tokenId, satoshiAmount, SELL
   *    ->
   *   codePart, GenesisPart, ownerPkhA, tokenId, TRANSFER
   */
  public function cancelSell(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Sig ownerSig, PubKey owner,
    Ripemd160 changePkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be sell
    require(pl.dataType == PayloadNFT.SELL);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    // 业务操作
    pl.dataType = PayloadNFT.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiBefore);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /* user B buy
   * buy:
   *   codePart, GenesisPart, ownerPkhA, tokenId, satoshiAmount, SELL
   *   ownerPkhB, satoshiAmount
   *    ->
   *   codePart, GenesisPart, ownerPkhB, tokenId, TRANSFER
   *   ownerPkhA, satoshiAmount
   */
  public function buy(SigHashPreimage txPreimage,
    int preTxOutpointSig, bytes preTxOutpointMsg, bytes preTxOutpointPadding,
    Ripemd160 buyerPkh, int satoshiAmount0,
    Ripemd160 changePkh, int satoshiAmount1) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be sell
    require(pl.dataType == PayloadNFT.SELL);

    // 溯源
    SatoTx st = new SatoTx(this.rabinPubKey, txPreimage, preTxOutpointSig, preTxOutpointMsg, preTxOutpointPadding, 0, b'', b'');
    require(st.verifyGenesis(pl.codeWithGenesisPart, SatoTx.disableUtxoInGenesisTx, b''));

    int satoshiBefore = Util.value(txPreimage);

    Ripemd160 sellerPkh = pl.ownerPkh;

    // 业务操作
    pl.ownerPkh = buyerPkh;
    pl.dataType = PayloadNFT.TRANSFER;
    bytes outputScript0 = pl.dump();
    bytes output0 = Util.buildOutput(outputScript0, satoshiAmount0);

    bytes outputScript1 = Util.buildPublicKeyHashScript(changePkh);
    bytes output1 = Util.buildOutput(outputScript1, satoshiAmount1);

    bytes outputScript2 = Util.buildPublicKeyHashScript(sellerPkh);
    bytes output2 = Util.buildOutput(outputScript2, pl.satoshiAmountSell + satoshiBefore);

    Sha256 hashOutputs = hash256(output0 + output1 + output2);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  /*
   * burn 函数用于用户销毁自己的1个nft，输入为1个TRANSFER，输出为1个找零
   */
  public function burn(SigHashPreimage txPreimage,
    Sig ownerSig, PubKey owner,
    Ripemd160 receiverPkh, int satoshiAmount) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // read previous locking script
    bytes lockingScript = Util.scriptCode(txPreimage);
    PayloadNFT pl = new PayloadNFT(lockingScript);

    // dataType must be transfer
    require(pl.dataType == PayloadNFT.TRANSFER);

    // authorize
    require(hash160(owner) == pl.ownerPkh);
    require(checkSig(ownerSig, owner));

    // send to a P2PKH script
    bytes lockingScript0 = Util.buildPublicKeyHashScript(receiverPkh);
    bytes output0 = Util.buildOutput(lockingScript0, satoshiAmount);
    Sha256 hashOutputs = hash256(output0);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}
