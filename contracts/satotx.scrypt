import "util.scrypt";
import "rabin.scrypt";

/*
* sideTxUtxoMsg 包含了本Tx花费的某UTXO的相关内容，数据结构如下：
*
*     UTXOTxID+Index, value, scriptCode
*
* preTxOutpointMsg 包含了前一个Tx花费的某UTXO的相关内容，数据结构如下：
*
*     UTXOTxID+Index, value, scriptCode, SpendByTxID
*
* 其中:
* TxID 32 Bytes
* Index 4 Bytes
* value 8 Bytes
*/

struct PayloadU4Data {
  int length;
  int scriptCodeLen;

  bytes outpoint;
  int value;
  bytes scriptCode;
}

struct PayloadU4SpendByData {
  int length;
  int scriptCodeLen;

  bytes outpoint;
  int value;
  bytes scriptCode;
  Sha256 byTxId;
}

contract SatoTx {
  int rabinPubKey;
  SigHashPreimage txPreimage;

  /* 溯源消息 */
  int preTxOutpointSig;
  bytes preTxOutpointMsg;
  bytes preTxOutpointPadding;

  /* side消息 */
  int sideTxUtxoSig;
  bytes sideTxUtxoMsg;
  bytes sideTxUtxoPadding;

  static bytes disableUtxoInGenesisTx = b'64697361626c654f746865725574786f4d6f76696e6746726f6d47656e65736973547821';

  function PayloadU4_load(bytes msg) : PayloadU4Data {
    PayloadU4Data self = {
      0,
      0,
      b'',
      0,
      b''
    };
    self.length = len(msg);
    self.scriptCodeLen = self.length - 32 - 4 - 8;

    self.outpoint = msg[ : 36];
    self.value = unpack(msg[36 : 44]);
    self.scriptCode = msg[44 : ];

    return self;
  }

  function PayloadU4SpendBy_load(bytes msg) : PayloadU4SpendByData {
    PayloadU4SpendByData self = {
      0,
      0,
      b'',
      0,
      b'',
      Sha256(b'')
    };
    self.length = len(msg);
    self.scriptCodeLen = self.length - 32 - 4 - 8 - 32;

    self.outpoint = msg[ : 36];
    self.value = unpack(msg[36 : 44]);
    self.scriptCode = msg[44 : self.length - 32];
    self.byTxId = Sha256(msg[self.length - 32 : ]);

    return self;
  }

  /**
  * 溯源
  * 查看前一个Tx，是否是GenesisTx；
  * 或者前一个Tx内，是否有被花费的UTXO的锁定脚本和当前运行的合约锁定脚本一致。
  */
  public function verifyGenesis(bytes codeWithGenesisPart, bytes genesisOutpoint, bytes genesisOutputIdx) {
    // preTxOutpointMsg: preTxId+index, value, lockingScript, byTxId
    PayloadU4SpendByData pl = this.PayloadU4SpendBy_load(this.preTxOutpointMsg);

    /* 确保溯源消息超过最短长度 */
    require(pl.scriptCodeLen > 0);

    // 签名校验溯源消息
    require(RabinSignature.verifySig(this.preTxOutpointSig, this.preTxOutpointMsg, this.preTxOutpointPadding, this.rabinPubKey));

    // 判断溯源信息中的spendByTxId, 必须是当前被花费的UTXO的TxId
    bytes thisOutpoint = Util.outpoint(this.txPreimage);
    require(pl.byTxId == thisOutpoint[ : 32]);

    bool matchGenesis = false;

    /* 检查前一个UTXO，判断是否满足溯源条件之一*/
    if (pl.outpoint == genesisOutpoint) {
      /* 如果前一个Tx花费的某UTXO的Outpoint是创世Outpoint */

      require(thisOutpoint[32 : 36] == genesisOutputIdx);
      /* 并且本Tx花费的UTXO的output index匹配 genesisOutputIdx ，则满足溯源。
      *
      * 这样可以限定GenesisTx内，只能创建一个可用合约UTXO。
      * 避免了GenesisTx内一次创建多个相同的可用issue合约，但同时可能会导致在GenesisTx直接发行的Token无法使用。
      *
      * 为了更明确，当前token合约的transfer实现函数溯源检查时已经主动禁用了GenesisTx判断条件。
      * 调用verifyGenesis的genesisOutpoint参数为'disableUtxoInGenesisTx'。
      */
      matchGenesis = true;
    } else {
      /* 如果前一个Tx花费的某UTXO的锁定脚本能匹配传入的codeWithGenesisPart，则满足溯源
      *
      * 传入的codeWithGenesisPart一定是从本Tx花费的UTXO的锁定脚本中来。
      */
      int scriptCodeLen = len(codeWithGenesisPart);
      require(pl.scriptCodeLen > scriptCodeLen);
      if (pl.scriptCode[ : scriptCodeLen] == codeWithGenesisPart) {
        matchGenesis = true;
      }
    }
    // 溯源检查
    require(matchGenesis == true);
  }

  /**
  * SideCheck
  * 查看当前Tx其他某输入的锁定脚本情况，需检查：
  * 1. 提供的sideTxUtxoMsg必须是当前Tx的非正在执行的某一UTXO合约
  *
  * 如果锁定脚本不为空（参数：codePart）还需检查：
  * 2. 提供的sideTxUtxoMsg内必须包含codePart锁定脚本
  *    如果codePart是当前正在执行的合约，则可实现要求检查的SideCode和当前合约一致
  *    如果codePart为空，则此时先跳过脚本判断，可在合约内再行通过脚本hash判断合约类型
  */
  public function verifySide(bytes codePart, bytes prevouts) {
    // this ensures prevouts is the preimage of hashPrevouts
    require(hash256(prevouts) == Util.hashPrevouts(this.txPreimage));

    PayloadU4Data pl = this.PayloadU4_load(this.sideTxUtxoMsg);
    require(pl.scriptCodeLen > 0);

    // 签名校验sideTxUtxoMsg消息
    require(RabinSignature.verifySig(this.sideTxUtxoSig, this.sideTxUtxoMsg, this.sideTxUtxoPadding, this.rabinPubKey));

    // 不可以是当前正在执行的合约，因为整个脚本数据可以从preimage获取，无需用sideTxUtxoMsg提供
    bytes thisOutpoint = Util.outpoint(this.txPreimage);
    require(pl.outpoint != thisOutpoint);

    // each outpoint: 32 byte txid + 4 byte index
    int prevOutpointsCount = len(prevouts) / 36;
    /* 目前Tx最大支持遍历16个input */
    require(prevOutpointsCount <= 16);

    bool matchSide = false;
    int currentI = 0;
    int sideI = 0;
    int i = 0;
    loop (16) {
      if (i < prevOutpointsCount && matchSide == false) {
        bytes outpoint = prevouts[i * 36 : i * 36 + 36];

        if (outpoint == thisOutpoint) {
          currentI = i;
          /* 记录当前loop i */
        }
        else if (outpoint == pl.outpoint) {
          sideI = i;
          int scriptCodeLen = len(codePart);
          if (scriptCodeLen > 0) {
            // 判断是同类合约
            require(pl.scriptCodeLen > scriptCodeLen);
            if (pl.scriptCode[ : scriptCodeLen] == codePart) {
              matchSide = true;
            }
          } else {
            // 忽视合约类型，只检查是否是当前UTXO
            matchSide = true;
          }
        }
        i = i + 1;
      }
    }
    // Side检查
    require(matchSide == true);
  }
}




